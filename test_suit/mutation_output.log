[*] Start mutation process:
   - targets: isTriangle
   - tests: test_mutationAdequate
[*] 16 tests passed:
   - test_mutationAdequate [0.00107 s]
[*] Start mutants generation and execution:
   - [#   1] AOR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a - b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.01626 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#   2] AOR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a - c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.01930 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#   3] AOR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c <= b or b - c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.01513 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#   4] AOR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 and a - b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.01907 s] killed by test13 (test_mutationAdequate.MutationAdequateTest)
   - [#   5] AOR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 and a - c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.01848 s] killed by test12 (test_mutationAdequate.MutationAdequateTest)
   - [#   6] AOR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 and b - c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.01716 s] killed by test11 (test_mutationAdequate.MutationAdequateTest)
   - [#   7] ASR isTriangle: 
--------------------------------------------------------------------------------
  23:         
  24:         trian = 0
  25:         
  26:         if a == b:
- 27:             trian += 1
+ 27:             trian -= 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
--------------------------------------------------------------------------------
[0.01657 s] killed by test13 (test_mutationAdequate.MutationAdequateTest)
   - [#   8] ASR isTriangle: 
--------------------------------------------------------------------------------
  25:         
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
- 29:             trian += 2
+ 29:             trian -= 2
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
--------------------------------------------------------------------------------
[0.01588 s] killed by test1 (test_mutationAdequate.MutationAdequateTest)
   - [#   9] ASR isTriangle: 
--------------------------------------------------------------------------------
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
- 31:             trian += 3
+ 31:             trian -= 3
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.01970 s] killed by test1 (test_mutationAdequate.MutationAdequateTest)
   - [#  10] COI isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if not ((a <= 0 or b <= 0 or c <= 0)):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.01612 s] killed by test1 (test_mutationAdequate.MutationAdequateTest)
   - [#  11] COI isTriangle: 
--------------------------------------------------------------------------------
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
- 26:         if a == b:
+ 26:         if not (a == b):
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
--------------------------------------------------------------------------------
[0.01802 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#  12] COI isTriangle: 
--------------------------------------------------------------------------------
  24:         trian = 0
  25:         
  26:         if a == b:
  27:             trian += 1
- 28:         if a == c:
+ 28:         if not (a == c):
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
--------------------------------------------------------------------------------
[0.01668 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#  13] COI isTriangle: 
--------------------------------------------------------------------------------
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
- 30:         if b == c:
+ 30:         if not (b == c):
  31:             trian += 3
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
--------------------------------------------------------------------------------
[0.01601 s] killed by test1 (test_mutationAdequate.MutationAdequateTest)
   - [#  14] COI isTriangle: 
--------------------------------------------------------------------------------
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
- 33:         if trian == 0:
+ 33:         if not (trian == 0):
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
--------------------------------------------------------------------------------
[0.01811 s] killed by test1 (test_mutationAdequate.MutationAdequateTest)
   - [#  15] COI isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if not ((a + b <= c or a + c <= b or b + c <= a)):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.02745 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#  16] COI isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian > 3:
+ 39:         if not (trian > 3):
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.01944 s] killed by test1 (test_mutationAdequate.MutationAdequateTest)
   - [#  17] COI isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if not ((trian == 1 and a + b > c)):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.01468 s] killed by test13 (test_mutationAdequate.MutationAdequateTest)
   - [#  18] COI isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif not ((trian == 2 and a + c > b)):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.01678 s] killed by test12 (test_mutationAdequate.MutationAdequateTest)
   - [#  19] COI isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif not ((trian == 3 and b + c > a)):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.01671 s] killed by test11 (test_mutationAdequate.MutationAdequateTest)
   - [#  20] CRP isTriangle: 
--------------------------------------------------------------------------------
   6:     An implementation that classifies triangles.
   7:     '''
   8:     
   9:     class Type(Enum):
- 10:         INVALID = 0
+ 10:         INVALID = 1
  11:         SCALENE = 1
  12:         EQUILATERAL = 2
  13:         ISOSCELES = 3
  14:     
--------------------------------------------------------------------------------
[0.02122 s] killed by test14 (test_mutationAdequate.MutationAdequateTest)
   - [#  21] CRP isTriangle: 
--------------------------------------------------------------------------------
   7:     '''
   8:     
   9:     class Type(Enum):
  10:         INVALID = 0
- 11:         SCALENE = 1
+ 11:         SCALENE = 2
  12:         EQUILATERAL = 2
  13:         ISOSCELES = 3
  14:     
  15:     @staticmethod
--------------------------------------------------------------------------------
[0.02136 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#  22] CRP isTriangle: 
--------------------------------------------------------------------------------
   8:     
   9:     class Type(Enum):
  10:         INVALID = 0
  11:         SCALENE = 1
- 12:         EQUILATERAL = 2
+ 12:         EQUILATERAL = 3
  13:         ISOSCELES = 3
  14:     
  15:     @staticmethod
  16:     def classify(a, b, c):
--------------------------------------------------------------------------------
[0.02161 s] killed by test1 (test_mutationAdequate.MutationAdequateTest)
   - [#  23] CRP isTriangle: 
--------------------------------------------------------------------------------
   9:     class Type(Enum):
  10:         INVALID = 0
  11:         SCALENE = 1
  12:         EQUILATERAL = 2
- 13:         ISOSCELES = 3
+ 13:         ISOSCELES = 4
  14:     
  15:     @staticmethod
  16:     def classify(a, b, c):
  17:         '''
--------------------------------------------------------------------------------
[0.01992 s] killed by test11 (test_mutationAdequate.MutationAdequateTest)
   - [#  24] CRP isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 1 or b <= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.02018 s] killed by test6 (test_mutationAdequate.MutationAdequateTest)
   - [#  25] CRP isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b <= 1 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.01824 s] killed by test6 (test_mutationAdequate.MutationAdequateTest)
   - [#  26] CRP isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b <= 0 or c <= 1):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.01782 s] killed by test6 (test_mutationAdequate.MutationAdequateTest)
   - [#  27] CRP isTriangle: 
--------------------------------------------------------------------------------
  20:         '''
  21:         if (a <= 0 or b <= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
- 24:         trian = 0
+ 24:         trian = 1
  25:         
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
--------------------------------------------------------------------------------
[0.01690 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#  28] CRP isTriangle: 
--------------------------------------------------------------------------------
  23:         
  24:         trian = 0
  25:         
  26:         if a == b:
- 27:             trian += 1
+ 27:             trian += 2
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
--------------------------------------------------------------------------------
[0.01842 s] killed by test16 (test_mutationAdequate.MutationAdequateTest)
   - [#  29] CRP isTriangle: 
--------------------------------------------------------------------------------
  25:         
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
- 29:             trian += 2
+ 29:             trian += 3
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
--------------------------------------------------------------------------------
[0.01801 s] killed by test15 (test_mutationAdequate.MutationAdequateTest)
   - [#  30] CRP isTriangle: 
--------------------------------------------------------------------------------
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
- 31:             trian += 3
+ 31:             trian += 4
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.01887 s] killed by test11 (test_mutationAdequate.MutationAdequateTest)
   - [#  31] CRP isTriangle: 
--------------------------------------------------------------------------------
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
- 33:         if trian == 0:
+ 33:         if trian == 1:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
--------------------------------------------------------------------------------
[0.01925 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#  32] CRP isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian > 3:
+ 39:         if trian > 4:
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.01873 s] survived
   - [#  33] CRP isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 2 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.01601 s] killed by test13 (test_mutationAdequate.MutationAdequateTest)
   - [#  34] CRP isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 3 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.01591 s] killed by test12 (test_mutationAdequate.MutationAdequateTest)
   - [#  35] CRP isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 4 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.01783 s] killed by test11 (test_mutationAdequate.MutationAdequateTest)
   - [#  36] DDL isTriangle: 
--------------------------------------------------------------------------------
  11:         SCALENE = 1
  12:         EQUILATERAL = 2
  13:         ISOSCELES = 3
  14:     
- 15:     @staticmethod
- 16:     def classify(a, b, c):
+ 15:     def classify(\
+ 16:         a, b, c):
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
--------------------------------------------------------------------------------
[0.01500 s] survived
   - [#  37] LCR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 and b <= 0 and c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.01590 s] killed by test7 (test_mutationAdequate.MutationAdequateTest)
   - [#  38] LCR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c and a + c <= b and b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.01732 s] killed by test5 (test_mutationAdequate.MutationAdequateTest)
   - [#  39] LCR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 or a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.01629 s] killed by test14 (test_mutationAdequate.MutationAdequateTest)
   - [#  40] LCR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 or a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.01714 s] killed by test14 (test_mutationAdequate.MutationAdequateTest)
   - [#  41] LCR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 or b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.02145 s] killed by test14 (test_mutationAdequate.MutationAdequateTest)
   - [#  42] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a >= 0 or b <= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.01735 s] killed by test1 (test_mutationAdequate.MutationAdequateTest)
   - [#  43] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a < 0 or b <= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.02101 s] killed by test7 (test_mutationAdequate.MutationAdequateTest)
   - [#  44] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b >= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.01964 s] killed by test1 (test_mutationAdequate.MutationAdequateTest)
   - [#  45] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b < 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.02001 s] killed by test8 (test_mutationAdequate.MutationAdequateTest)
   - [#  46] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b <= 0 or c >= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.01855 s] killed by test1 (test_mutationAdequate.MutationAdequateTest)
   - [#  47] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b <= 0 or c < 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.01682 s] killed by test9 (test_mutationAdequate.MutationAdequateTest)
   - [#  48] ROR isTriangle: 
--------------------------------------------------------------------------------
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
- 26:         if a == b:
+ 26:         if a != b:
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
--------------------------------------------------------------------------------
[0.01567 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#  49] ROR isTriangle: 
--------------------------------------------------------------------------------
  24:         trian = 0
  25:         
  26:         if a == b:
  27:             trian += 1
- 28:         if a == c:
+ 28:         if a != c:
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
--------------------------------------------------------------------------------
[0.01592 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#  50] ROR isTriangle: 
--------------------------------------------------------------------------------
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
- 30:         if b == c:
+ 30:         if b != c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
--------------------------------------------------------------------------------
[0.01699 s] killed by test1 (test_mutationAdequate.MutationAdequateTest)
   - [#  51] ROR isTriangle: 
--------------------------------------------------------------------------------
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
- 33:         if trian == 0:
+ 33:         if trian != 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
--------------------------------------------------------------------------------
[0.01550 s] killed by test1 (test_mutationAdequate.MutationAdequateTest)
   - [#  52] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b >= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.02259 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#  53] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b < c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.01647 s] killed by test5 (test_mutationAdequate.MutationAdequateTest)
   - [#  54] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c >= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.01520 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#  55] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c < b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.01485 s] survived
   - [#  56] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c <= b or b + c >= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.01521 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#  57] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c <= b or b + c < a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.02095 s] survived
   - [#  58] ROR isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian > 3:
+ 39:         if trian < 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.02112 s] killed by test1 (test_mutationAdequate.MutationAdequateTest)
   - [#  59] ROR isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian > 3:
+ 39:         if trian >= 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.01613 s] killed by test11 (test_mutationAdequate.MutationAdequateTest)
   - [#  60] ROR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian != 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.01711 s] killed by test13 (test_mutationAdequate.MutationAdequateTest)
   - [#  61] ROR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 and a + b < c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.01530 s] killed by test13 (test_mutationAdequate.MutationAdequateTest)
   - [#  62] ROR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 and a + b >= c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.01834 s] killed by test16 (test_mutationAdequate.MutationAdequateTest)
   - [#  63] ROR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian != 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.01556 s] killed by test12 (test_mutationAdequate.MutationAdequateTest)
   - [#  64] ROR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 and a + c < b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.02085 s] killed by test12 (test_mutationAdequate.MutationAdequateTest)
   - [#  65] ROR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 and a + c >= b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.01501 s] killed by test15 (test_mutationAdequate.MutationAdequateTest)
   - [#  66] ROR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian != 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.01569 s] killed by test11 (test_mutationAdequate.MutationAdequateTest)
   - [#  67] ROR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 and b + c < a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.01572 s] killed by test11 (test_mutationAdequate.MutationAdequateTest)
   - [#  68] ROR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 and b + c >= a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.02171 s] killed by test14 (test_mutationAdequate.MutationAdequateTest)
[*] Mutation score [3.93058 s]: 94.1%
   - all: 68
   - killed: 64 (94.1%)
   - survived: 4 (5.9%)
   - incompetent: 0 (0.0%)
   - timeout: 0 (0.0%)
[*] Start mutation process:
   - targets: isTriangle
   - tests: test_mutationAdequate
[*] 16 tests passed:
   - test_mutationAdequate [0.00089 s]
[*] Start mutants generation and execution:
   - [#   1] AOR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a - b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.01535 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#   2] AOR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a - c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.01501 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#   3] AOR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c <= b or b - c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.01587 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#   4] AOR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 and a - b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.02198 s] killed by test13 (test_mutationAdequate.MutationAdequateTest)
   - [#   5] AOR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 and a - c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.01486 s] killed by test12 (test_mutationAdequate.MutationAdequateTest)
   - [#   6] AOR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 and b - c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.01514 s] killed by test11 (test_mutationAdequate.MutationAdequateTest)
   - [#   7] ASR isTriangle: 
--------------------------------------------------------------------------------
  23:         
  24:         trian = 0
  25:         
  26:         if a == b:
- 27:             trian += 1
+ 27:             trian -= 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
--------------------------------------------------------------------------------
[0.01637 s] killed by test13 (test_mutationAdequate.MutationAdequateTest)
   - [#   8] ASR isTriangle: 
--------------------------------------------------------------------------------
  25:         
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
- 29:             trian += 2
+ 29:             trian -= 2
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
--------------------------------------------------------------------------------
[0.01550 s] killed by test1 (test_mutationAdequate.MutationAdequateTest)
   - [#   9] ASR isTriangle: 
--------------------------------------------------------------------------------
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
- 31:             trian += 3
+ 31:             trian -= 3
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.01519 s] killed by test1 (test_mutationAdequate.MutationAdequateTest)
   - [#  10] COI isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if not ((a <= 0 or b <= 0 or c <= 0)):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.01498 s] killed by test1 (test_mutationAdequate.MutationAdequateTest)
   - [#  11] COI isTriangle: 
--------------------------------------------------------------------------------
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
- 26:         if a == b:
+ 26:         if not (a == b):
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
--------------------------------------------------------------------------------
[0.01456 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#  12] COI isTriangle: 
--------------------------------------------------------------------------------
  24:         trian = 0
  25:         
  26:         if a == b:
  27:             trian += 1
- 28:         if a == c:
+ 28:         if not (a == c):
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
--------------------------------------------------------------------------------
[0.01429 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#  13] COI isTriangle: 
--------------------------------------------------------------------------------
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
- 30:         if b == c:
+ 30:         if not (b == c):
  31:             trian += 3
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
--------------------------------------------------------------------------------
[0.01504 s] killed by test1 (test_mutationAdequate.MutationAdequateTest)
   - [#  14] COI isTriangle: 
--------------------------------------------------------------------------------
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
- 33:         if trian == 0:
+ 33:         if not (trian == 0):
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
--------------------------------------------------------------------------------
[0.01485 s] killed by test1 (test_mutationAdequate.MutationAdequateTest)
   - [#  15] COI isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if not ((a + b <= c or a + c <= b or b + c <= a)):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.01676 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#  16] COI isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian > 3:
+ 39:         if not (trian > 3):
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.01496 s] killed by test1 (test_mutationAdequate.MutationAdequateTest)
   - [#  17] COI isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if not ((trian == 1 and a + b > c)):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.01464 s] killed by test13 (test_mutationAdequate.MutationAdequateTest)
   - [#  18] COI isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif not ((trian == 2 and a + c > b)):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.01601 s] killed by test12 (test_mutationAdequate.MutationAdequateTest)
   - [#  19] COI isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif not ((trian == 3 and b + c > a)):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.01565 s] killed by test11 (test_mutationAdequate.MutationAdequateTest)
   - [#  20] CRP isTriangle: 
--------------------------------------------------------------------------------
   6:     An implementation that classifies triangles.
   7:     '''
   8:     
   9:     class Type(Enum):
- 10:         INVALID = 0
+ 10:         INVALID = 1
  11:         SCALENE = 1
  12:         EQUILATERAL = 2
  13:         ISOSCELES = 3
  14:     
--------------------------------------------------------------------------------
[0.01597 s] killed by test14 (test_mutationAdequate.MutationAdequateTest)
   - [#  21] CRP isTriangle: 
--------------------------------------------------------------------------------
   7:     '''
   8:     
   9:     class Type(Enum):
  10:         INVALID = 0
- 11:         SCALENE = 1
+ 11:         SCALENE = 2
  12:         EQUILATERAL = 2
  13:         ISOSCELES = 3
  14:     
  15:     @staticmethod
--------------------------------------------------------------------------------
[0.02319 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#  22] CRP isTriangle: 
--------------------------------------------------------------------------------
   8:     
   9:     class Type(Enum):
  10:         INVALID = 0
  11:         SCALENE = 1
- 12:         EQUILATERAL = 2
+ 12:         EQUILATERAL = 3
  13:         ISOSCELES = 3
  14:     
  15:     @staticmethod
  16:     def classify(a, b, c):
--------------------------------------------------------------------------------
[0.01737 s] killed by test1 (test_mutationAdequate.MutationAdequateTest)
   - [#  23] CRP isTriangle: 
--------------------------------------------------------------------------------
   9:     class Type(Enum):
  10:         INVALID = 0
  11:         SCALENE = 1
  12:         EQUILATERAL = 2
- 13:         ISOSCELES = 3
+ 13:         ISOSCELES = 4
  14:     
  15:     @staticmethod
  16:     def classify(a, b, c):
  17:         '''
--------------------------------------------------------------------------------
[0.01693 s] killed by test11 (test_mutationAdequate.MutationAdequateTest)
   - [#  24] CRP isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 1 or b <= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.01543 s] killed by test6 (test_mutationAdequate.MutationAdequateTest)
   - [#  25] CRP isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b <= 1 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.01593 s] killed by test6 (test_mutationAdequate.MutationAdequateTest)
   - [#  26] CRP isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b <= 0 or c <= 1):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.01566 s] killed by test6 (test_mutationAdequate.MutationAdequateTest)
   - [#  27] CRP isTriangle: 
--------------------------------------------------------------------------------
  20:         '''
  21:         if (a <= 0 or b <= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
- 24:         trian = 0
+ 24:         trian = 1
  25:         
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
--------------------------------------------------------------------------------
[0.01598 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#  28] CRP isTriangle: 
--------------------------------------------------------------------------------
  23:         
  24:         trian = 0
  25:         
  26:         if a == b:
- 27:             trian += 1
+ 27:             trian += 2
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
--------------------------------------------------------------------------------
[0.01562 s] killed by test16 (test_mutationAdequate.MutationAdequateTest)
   - [#  29] CRP isTriangle: 
--------------------------------------------------------------------------------
  25:         
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
- 29:             trian += 2
+ 29:             trian += 3
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
--------------------------------------------------------------------------------
[0.02185 s] killed by test15 (test_mutationAdequate.MutationAdequateTest)
   - [#  30] CRP isTriangle: 
--------------------------------------------------------------------------------
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
- 31:             trian += 3
+ 31:             trian += 4
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.01562 s] killed by test11 (test_mutationAdequate.MutationAdequateTest)
   - [#  31] CRP isTriangle: 
--------------------------------------------------------------------------------
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
- 33:         if trian == 0:
+ 33:         if trian == 1:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
--------------------------------------------------------------------------------
[0.01556 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#  32] CRP isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian > 3:
+ 39:         if trian > 4:
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.01473 s] survived
   - [#  33] CRP isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 2 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.01629 s] killed by test13 (test_mutationAdequate.MutationAdequateTest)
   - [#  34] CRP isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 3 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.01687 s] killed by test12 (test_mutationAdequate.MutationAdequateTest)
   - [#  35] CRP isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 4 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.01600 s] killed by test11 (test_mutationAdequate.MutationAdequateTest)
   - [#  36] DDL isTriangle: 
--------------------------------------------------------------------------------
  11:         SCALENE = 1
  12:         EQUILATERAL = 2
  13:         ISOSCELES = 3
  14:     
- 15:     @staticmethod
- 16:     def classify(a, b, c):
+ 15:     def classify(\
+ 16:         a, b, c):
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
--------------------------------------------------------------------------------
[0.01480 s] survived
   - [#  37] LCR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 and b <= 0 and c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.01630 s] killed by test7 (test_mutationAdequate.MutationAdequateTest)
   - [#  38] LCR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c and a + c <= b and b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.01571 s] killed by test5 (test_mutationAdequate.MutationAdequateTest)
   - [#  39] LCR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 or a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.01534 s] killed by test14 (test_mutationAdequate.MutationAdequateTest)
   - [#  40] LCR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 or a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.02127 s] killed by test14 (test_mutationAdequate.MutationAdequateTest)
   - [#  41] LCR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 or b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.01552 s] killed by test14 (test_mutationAdequate.MutationAdequateTest)
   - [#  42] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a >= 0 or b <= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.01529 s] killed by test1 (test_mutationAdequate.MutationAdequateTest)
   - [#  43] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a < 0 or b <= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.01564 s] killed by test7 (test_mutationAdequate.MutationAdequateTest)
   - [#  44] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b >= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.01583 s] killed by test1 (test_mutationAdequate.MutationAdequateTest)
   - [#  45] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b < 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.02315 s] killed by test8 (test_mutationAdequate.MutationAdequateTest)
   - [#  46] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b <= 0 or c >= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.01561 s] killed by test1 (test_mutationAdequate.MutationAdequateTest)
   - [#  47] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b <= 0 or c < 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.01630 s] killed by test9 (test_mutationAdequate.MutationAdequateTest)
   - [#  48] ROR isTriangle: 
--------------------------------------------------------------------------------
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
- 26:         if a == b:
+ 26:         if a != b:
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
--------------------------------------------------------------------------------
[0.01473 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#  49] ROR isTriangle: 
--------------------------------------------------------------------------------
  24:         trian = 0
  25:         
  26:         if a == b:
  27:             trian += 1
- 28:         if a == c:
+ 28:         if a != c:
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
--------------------------------------------------------------------------------
[0.01532 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#  50] ROR isTriangle: 
--------------------------------------------------------------------------------
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
- 30:         if b == c:
+ 30:         if b != c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
--------------------------------------------------------------------------------
[0.02177 s] killed by test1 (test_mutationAdequate.MutationAdequateTest)
   - [#  51] ROR isTriangle: 
--------------------------------------------------------------------------------
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
- 33:         if trian == 0:
+ 33:         if trian != 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
--------------------------------------------------------------------------------
[0.01603 s] killed by test1 (test_mutationAdequate.MutationAdequateTest)
   - [#  52] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b >= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.01474 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#  53] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b < c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.02231 s] killed by test5 (test_mutationAdequate.MutationAdequateTest)
   - [#  54] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c >= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.01506 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#  55] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c < b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.02145 s] survived
   - [#  56] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c <= b or b + c >= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.01455 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#  57] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c <= b or b + c < a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.01440 s] survived
   - [#  58] ROR isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian > 3:
+ 39:         if trian < 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.01550 s] killed by test1 (test_mutationAdequate.MutationAdequateTest)
   - [#  59] ROR isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian > 3:
+ 39:         if trian >= 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.01505 s] killed by test11 (test_mutationAdequate.MutationAdequateTest)
   - [#  60] ROR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian != 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.01513 s] killed by test13 (test_mutationAdequate.MutationAdequateTest)
   - [#  61] ROR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 and a + b < c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.01644 s] killed by test13 (test_mutationAdequate.MutationAdequateTest)
   - [#  62] ROR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 and a + b >= c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.01606 s] killed by test16 (test_mutationAdequate.MutationAdequateTest)
   - [#  63] ROR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian != 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.01560 s] killed by test12 (test_mutationAdequate.MutationAdequateTest)
   - [#  64] ROR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 and a + c < b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.01505 s] killed by test12 (test_mutationAdequate.MutationAdequateTest)
   - [#  65] ROR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 and a + c >= b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.01608 s] killed by test15 (test_mutationAdequate.MutationAdequateTest)
   - [#  66] ROR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian != 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.01925 s] killed by test11 (test_mutationAdequate.MutationAdequateTest)
   - [#  67] ROR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 and b + c < a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.02170 s] killed by test11 (test_mutationAdequate.MutationAdequateTest)
   - [#  68] ROR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 and b + c >= a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.01606 s] killed by test14 (test_mutationAdequate.MutationAdequateTest)
[*] Mutation score [4.35096 s]: 94.1%
   - all: 68
   - killed: 64 (94.1%)
   - survived: 4 (5.9%)
   - incompetent: 0 (0.0%)
   - timeout: 0 (0.0%)
